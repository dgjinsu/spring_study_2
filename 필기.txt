웹 서버
- HTTP 기반으로 동작
- 정적 리소스

웹 애플리케이션 서버(WAS)
- HTTP 기반으로 동작
- 웹 서버 기능 포함 + (정적 리소스 제공 가능)
- 프로그램 코드를 실행해서 애플리케이션 로직 수행
	- 동적 HTML, HTTP API(JSON)
	- 서블릿, JSP, 스프링 MVC
ex) 톰캣
문제점 : 
WAS가 너무 많은 역할을 담당
비싼 애플리케이션 로직이 정적 리소스 때문에 수행이 어려울 수 있음
WAS 장애 시 오류 화면도 노출 불가

따라서
Client -> Web Server -> WAS -> DB 로 구성



<Servlet>
HttpServletRequest / HttpServletResponse
- HTTP 요청 시 WAS는 Request,Response 객체를 새로 만들어서 서블릿 객체 호출

서블릿 컨테이너
- 톰캣 처럼 서블릿을 지원하는 WAS를 서블릿 컨테이너라고 함
- 서블릿 객체는 싱글톤으로 관리
	- request response는 요청이 올때마다 생성하지만
	- 서블릿 객체는 최초 로딩 시점에 만들고 이후 동일한 객체에 접근
	- 서블릿 컨테이너 종료 시 함께 종료
- """동시 요청을 위한 멀티 쓰레드 지원"""


<쓰레드>
- 애플리케이션 코드를 하나하나 순차적으로 실행하는 것
- 쓰레드가 없으면 자바 애플리케이션 실행이 불가
- 쓰레드는 한번에 하나의 코드 라인을 수행
- 동시 처리가 필요하다면 쓰레드 추가 생성

요청마다 쓰레드를 생성한다면?
- 쓰레드 생성 비용은 매우 비쌈
- 쓰레드 생성에 제한이 없다 -> 고객 요청이 너무 많이 오면 CPU, 메모리 임계점을 넘어서 서버가 죽을 수 있다.

그래서 쓰레드 풀을 사용
- 쓰레드를 미리 정해진 수 만큼 만들어서 필요할때 가져가서 사용하고 반납
- 쓰레드 풀에 쓰레드가 없으면 대기 하거나 거절



SSR (서버사이드랜더링)
서버에서 최종 HTML을 생성해서 클라이언트에 전달
- 주로 정적인 화면에서 사용
- 관련기술 : JSP, 타임리프 -> 백엔드개발자

CSR (클라이언트사이드랜더링)
HTML 결과를 자바스크립트를 이용해 웹 브라우저에서 동적으로 생성해서 사용
- 주로 동적인 화면에서 사용
- ex) 구글지도 (드래그 하거나 스크롤해도 주소는 변하지 않음)
- 관련기술 : 리액트 -> 프론트개발자



HTTP 요청
3가지 방식

1. GET - 쿼리 파라미터
 - ?name="김진수"
 - 메시지 바디 없이, URL의 쿼리 파라미터에 데이터를 포함해서 전달
 - content-type = NULL
 - ex) 검색, 필터, 페이징

2. POST -  HTML Form
 - content-type = application/x-www-form-urlencoded
 - 메시지 바디에 쿼리 파라미터로 형식으로 전달 username = hello&age=20
 - 회원가입, 상품 주문, HTML Form 사용

3. HTTP message body
 - HTTP API 에서 주로 사용, JSON, XML
 - 데이터 형식은 주로 JSON
 - POST, PUT, PATCH
 - content-type = text.plain	application/json


HTTP 응답
 - HTTP 응답코드 지정			response.setStatus(HttpServletResponse.SC_OK)
 - 해더, 바디 생성				
 - Content-type, 쿠키, Redirect		response.setHeader("Content-Type", "text/plain;charset=utf-8")  /  response.setContentType("text/plain")
					쿠키	Cookie cookie = new Cookie("myCookie", "good")
						cookie.setMaxAge(600);
						response.addCookie(cookie)

				리다이랙트	response.sendRedirect("주소~~")



<MVC패턴>
하나의 서블릿이나 JSP 만으로 비즈니스 로직과 뷰 렌더링까지 모두 처리하게 되면, 너무 많은 역할을 하게되고,
유지보수가 어려움.

Controller : HTTP요청을 받아서 파라미터를 검증하고, 비즈니스 로직을 실행. 그리고 뷰에 전달할 겨로가 데이터를 조회해서 모델에 담음
Model : 뷰에 출력할 데이터를 담아둔다. 덕분에 뷰는 비즈니스 로직이나 데이터 접근을 몰라도 되고, 화면 렌더링에 집중할 수 있다.
View : 모델에 담겨있는 데이터를 사용해서 화면에 그리는 일에 집중한다.